#!/bin/bash
# (c) by Robert Kalinowski <robert.kalinowski@sharkbits.com>


#------------------------------------------------------------------------------
# Parse simple TOML files.
#
# toml_simple_parse [-q] <filename>|- [prefix]
#
# Parse TOML file and prints bash variable style (sect_var='val')
# Only simple TOML can be parsed: scalars and mappings, tables.
# Section tables have index in name,like: sect_0, sect_1.
# Variable tables are bash arrays, like: ( 'val0' 'val1' ).
#
# If -q option is used, errors are ignore quiet.
#
# Example:
#   eval $(toml_simple_parse config.toml conf_)
#
# Note, \047 is apostophe (').
# Note, variables in funcions after many spaces are local variables.
#
function toml_simple_parse
{
	if [[ "$1" == '-q' ]]; then
		shift
		[[ -r "$1" ]] || return 1
	fi
	awk -v prefix="$2" -v ap="'" '
	function parse_sect(sect,   r)
	{
		match(sect, /^\s*(\[+)\s*("([^"]+)"|\047([^\047]+)\047|([^]"\047]+))\s*\]+(\s*#.*)?$/, r)
		sect = r[3]r[4]r[5]
		if(r[1] = "[[")
		{
			tables[sect] += 1
			sect = sect "_" (tables[sect]-1)
		}
		return prefix gensub(/(\W|_)+/, "_", "g", sect)
	}

	function parse_var(var)
	{
		var = gensub(/^("([^"]+)"|\047([^\047]+)\047|([^"\047= ]+))$/, "\\2\\3\\4", 1, var)
		return gensub(/(\W|_)+/, "_", "g", var)
	}

	function parse_val(var, val,   r)
	{
		if(match(val, /^\[((\s*,?\s*("([^"]+)"|\047([^\047]*)\047|([^"\047#, ]+)))*)\]\s*(#.*)?$/, r))
		{
			val = gensub(/\s*,?\s*("([^"]+)"|\047([^\047]*)\047|([^"\047#, ]+))/, "\047\\2\\3\\4\047 " , "g", r[1])
			return var"=( "val")"
		}
		val = gensub(/^("([^"]+)"|\047([^\047]+)\047|([^"\047][^# ]*)\s*)(\s*#.*)?$/, "\\2\\3\\4", 1, val)
		return var"=\047"val"\047"
	}

	/^\s*\[/ {
		sect = parse_sect($0)
	}
	/^\s*(\w|["\047])/ {
		match($0, /^\s*("([^"]+)"|\047([^\047]+)\047|([^"\047= 	]+))\s*=\s*(.*\S)\s*$/, r)
		var = parse_var(r[1])
		print parse_val(sect"_"var, r[5])
	}
	' "$1"
}
#------------------------------------------------------------------------------
