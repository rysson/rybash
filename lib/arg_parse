#!/bin/bash
# (c) by Robert Kalinowski <robert.kalinowski@sharkbits.com>

rybash-include bool
rybash-include error

#------------------------------------------------------------------------------
# Parse command line arguments
#
# Example:
#   while arg_parse "$@"; do
#     case "$op" in
#       -f|--foo)  arg_arg foo;;
#       --bar)     arg_optarg bar;;
#       -b|--baz)  arg_true baz;;
#       -*)        arg_error;;
#     esac
#   done
#
#   arg_arg db && echo "File is '$db'"  || error "No database"
#   while arg_arg; do
#     echo "Extra posistional argument '$arg'"
#   done
#
#
# Old example:
#   while arg_parse "$@"; do
#     case "$op" in
#       -f|--foo)  arg_arg; foo="$arg";;
#       --bar)     arg_optarg; bar="$optarg";;
#       -b|--baz)  baz="$TRUE";;
#     esac
#   done
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Make all variables local
#
# eval $(arg_local)
#------------------------------------------------------------------------------
arg_local()
{
	echo 'local _arg arg _arg_end _arg_rest _args _args_copied _arg_shift _lnarg_shift _arg_unrest op _optarg optarg'
}
#------------------------------------------------------------------------------
# Parse arguments
#
# arg_parse command-line-arguments...
#
# Function parse and set variables:
#  $op     - option
#  $arg    - option argument if any; variable is set after arg_arg call
#  $optarg - optional argument if any (--key=value); variable is set after arg_optarg call
#
#  Input:      $op:    $arg:  $optarg:
#  -f FOO      -f      FOO
#  -fFOO       -f      FOO    FOO
#  --foo FOO   --foo   FOO
#  --foo=FOO   --foo   FOO    FOO
#------------------------------------------------------------------------------
arg_parse()
{
	[[ -z "${_args_copied+x}" ]] && _args=("$@") && _args_copied=y && \
		_arg_end= && _arg_rest=()
	[[ ${#_args[@]} = 0 ]] && { unset _args_copied; _arg_end=$TRUE; return 1; }
	op="${_args[0]}"
	_args=("${_args[@]:1}")
	_arg_shift=
	_lnarg_shift=
	_arg_unrest=
	arg=
	optarg=
	if is_false "$_arg_end"; then
		case "$op" in
			--?*=*) _arg="${op#*=}";    _optarg="$_arg";   op="${op%%=*}";;
			--?*)   _arg="${_args[0]}"; _optarg=$TRUE;     _arg_shift=$TRUE;;
			--)     _arg_end=$TRUE; _arg_rest=("${_arg_rest[@]}" "${_args[@]}");
			        _args=(); return 1;;
			-??*)   _arg="${op:2}";     _optarg="${_arg}"; op="${op:0:2}";
			        _lnarg_shift=$TRUE; _args=("-$_arg" "${_args[@]}");;
			-?)     _arg="${_args[0]}"; _optarg=;          _arg_shift=$TRUE;;
			*)      _arg="${_args[0]}"; _optarg=$TRUE;     _arg_shift=$TRUE;
			        _arg_rest+=("$op"); _arg_unrest=$TRUE ;;
			# *)      _arg=;              _optarg=;          _arg_rest+=($op);;
		esac
	fi
}
#------------------------------------------------------------------------------
# Prepare arguments to next parsing
arg_reset()
{
	unset _args_copied
}
#------------------------------------------------------------------------------
# Return argument (optional or positional).
#
# arg_arg [var]
#
# If used in arg_parse loop, returns option argument. Shift if neccesery.
# If used after arg_aprse loop, returns positional argument.
#------------------------------------------------------------------------------
arg_arg()
{
	if is_true "$_arg_end"; then
		[[ ${#_arg_rest[@]} = 0 ]] && arg= && return 1
		arg="${_arg_rest[0]}"
		_arg_rest=("${_arg_rest[@]:1}")
	else
		if is_true "$_arg_shift"; then
			_args=("${_args[@]:1}")
			is_true "$_arg_unrest" && _arg_unrest= && unset '_arg_rest[-1]'
		fi
		if is_true "$_lnarg_shift"; then
			case "$op" in
				-[^-])  [[ $_arg ]] && _args=("${_args[@]:1}");;
			esac
			_lnarg_shift=
		fi
		_arg_shift=
		arg="$_arg"
	fi
	local re='^[a-zA-Z_]\w*$'
	[[ $1 =~ $re ]] && eval "$1='$arg'" || :
}
#------------------------------------------------------------------------------
# Return true if has argument (optional or positional).
#
# arg_exists
#
# If used in arg_parse loop, returns true if option argument exists.
# If used after arg_aprse loop, returns true if positional argument exists.
#------------------------------------------------------------------------------
arg_exists()
{
	if is_true "$_arg_end"; then
		# has postional argument
		[[ ${#_arg_rest[@]} != 0 ]]
	elif is_true "$_lnarg_shift"; then
		# has optional short argument (-aXX)
		true
	elif is_true "$_arg_shift"; then
		# has separate argument (-a XX, --a XX)
		[[ ${#_args[@]} != 0 ]]
	else
		# has oprional long argument (--a=XX)
		[[ $_optarg ]]
	fi
}
#------------------------------------------------------------------------------
# Return optional argument. Shift if neccesery.
#
# arg_optarg [var [default]]
#------------------------------------------------------------------------------
arg_optarg()
{
	if is_true "$_lnarg_shift"; then
		case "$op" in
			-[^-])  [[ $_optarg ]] && _args=("${_args[@]:1}");;
		esac
		_lnarg_shift=
	fi
	arg="$_optarg"
	[[ $1 && $2 && ! $arg ]] && arg="$2"  # default
	local re='^[a-zA-Z_]\w*$'
	[[ $1 =~ $re ]] && eval "$1='$arg'"
}
#------------------------------------------------------------------------------
# Return boolaen arguments (true).
#
# arg_true [var]
#------------------------------------------------------------------------------
arg_true()
{
	arg="$TRUE"
	local re='^[a-zA-Z_]\w*$'
	[[ $1 =~ $re ]] && eval "$1='$TRUE'"
}
#------------------------------------------------------------------------------
# Print unkown option error (default $op).
#
# arg_error [<argument_name>]
#------------------------------------------------------------------------------
arg_error()
{
	local handle='error'
	if [[ $1 = '--fatal' ]]; then shift; handle='fatal'; fi
	local a="${1:-${op:-$arg}}"
	$handle "Unknow argument '$a' in function '${FUNCNAME[1]}'" >&2
}
#------------------------------------------------------------------------------
# Put back option / argument. Undo parsing step.
#
# arg_undo [val]
#------------------------------------------------------------------------------
arg_undo()
{
	[[ $# > 0 ]] && _args=("$@" "${_args[@]}") || _args=("$op" "${_args[@]}")
	_arg_shift=
	_lnarg_shift=
	arg=
	optarg=
}
#------------------------------------------------------------------------------
# Set all non-parsed options and arguments
#
# eval $(arg_apply_rest)
#------------------------------------------------------------------------------
arg_apply_rest()
{
	echo 'set -- "${_args[@]}"'
}
#------------------------------------------------------------------------------
