#!/bin/bash
# (c) by Robert Kalinowski <robert.kalinowski@sharkbits.com>


#------------------------------------------------------------------------------
# Parse simple YAML files.
#
# yaml_simple_parse [-q] <filename>|- [prefix]
#
# Parse YAML file and prints bash variable style (sect_var="val")
# Only simple YAML can be parsed: scalars and mappings.
# Sequences, link, multilines etc. are not supported.
#
# If -q option is used, errors are ignore quiet.
#
# Example:
#   eval $(yaml_simple_parse config.yaml conf_)
#
# Inpirated by https://stackoverflow.com/a/21189044/9935708
# Note, \047 is apostophe (').
# Note, variables in funcions after many spaces are local variables.
#
function yaml_simple_parse
{
	if [[ "$1" == '-q' ]]; then
		shift
		[[ -r "$1" ]] || return 1
	fi
	awk -v prefix="$2" -v ap="'" '
	function join(array, stop, prefix,   i)
	{
		prefix = prefix array[1]
		for(i = 2; i <= stop; i++)
			prefix = prefix "_" array[i]
		return prefix
	}

	function parse_val(val, sp,     r)
	{
		if(match(val, /^\[((\s*,?\s*("([^"]+)"|\047([^\047]*)\047|([^"\047#, ]+)))*)\]\s*(#.*)?$/, r))
		{
			val = gensub(/\s*,?\s*("([^"]+)"|\047([^\047]*)\047|([^"\047#, ]+))/, sp "\\2\\3\\4" sp " " , "g", r[1])
			return "( "val")"
		}
		val = gensub(/^("([^"]+)"|\047([^\047]+)\047|([^"\047][^# ]*)\s*)(\s*#.*)?$/, "\\2\\3\\4", 1, val)
		if(val)
			return sp val sp
	}

	BEGIN { level=0; }
	{
		if (!match($0, /^(\s*):?(([^:#]+)\s*:|-)\s*(!\w+)?\s*(.*)\s*$/, r))
			next
		s = r[1]
		if (length(s) > length(indent[level]))
		{
			indent[++level] = s
			tabindex[level] = 0
		}
		else while (length(s) < length(indent[level]))
		{
			level--
		}
		type = r[4]; val = r[5]
		var = gensub("-", "_", "g", r[3])
		sects[level + 1] = var
		if( ! var)
		{
			var = tabindex[level]
			tabindex[level]++
		}
		else if(match(r[3], /^-\s*(.+)$/, rr))
		{
			sects[level + 1] = tabindex[level] "_" rr[1]
			var = tabindex[level]
			tabindex[level]++
		}
		if (type == "!ENV") sp = "\""; else sp = ap
		val = parse_val(val, sp)
		if (val != "")
		{
			if (r[2] == "-")
			{
				if (sect[level] == "")
				{
					printf("%s=()\n", join(sects, level, prefix))
					sect[level] = "-"
				}
				printf("%s+=( " "%s" " )\n", join(sects, level, prefix), val)
			}
			else
				printf("%s=" "%s" "\n", join(sects, level + 1, prefix), val)
		}
		sects[level + 1] = var
	}
	' "$1"
}
#------------------------------------------------------------------------------
