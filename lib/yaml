#!/bin/bash
# (c) by Robert Kalinowski <robert.kalinowski@sharkbits.com>


#------------------------------------------------------------------------------
# Parse simple YAML files.
#
# yaml_simple_parse [-q] <filename>|- [prefix]
#
# Parse YAML file and prints bash variable style (sect_var="val")
# Only simple YAML can be parsed: scalars and mappings.
# Sequences, link, multilines etc. are not supported.
#
# If -q option is used, errors are ignore quiet.
#
# Example:
#   eval $(yaml_simple_parse config.yaml conf_)
#
# Inpirated by https://stackoverflow.com/a/21189044/9935708
function yaml_simple_parse
{
	if [[ "$1" == '-q' ]]; then
		shift
		[[ -r "$1" ]] || return 1
	fi
	awk -v prefix="$2" -v ap="'" '
	function join(array, stop, prefix,   i)
	{
		prefix = prefix array[1]
		for(i = 2; i <= stop; i++)
			prefix = prefix "_" array[i]
		return prefix
	}
	BEGIN { level=0; }
	{
		if (!match($0, /^(\s*):?(([^:#]+)\s*:|-)\s*(!\w+)?\s*(.*)\s*$/, r))
			next
		s = r[1]
		if (length(s) > length(indent[level]))
			indent[++level] = s
		else while (length(s) < length(indent[level]))
			level--
		var = r[3]; type = r[4]; val = r[5]
		if (match(val, /^".*"$|^'"'"'.*'"'"'$/))
			val = substr(val, 2, length(val) - 2)
		sects[level + 1] = var
		if (type == "!ENV") sp = "\""; else sp = ap
		if (val != "")
		{
			if (r[2] == "-")
			{
				if (sect[level] == "")
				{
					printf("%s=()\n", join(sects, level, prefix))
					sect[level] = "-"
				}
				printf("%s+=(" sp "%s" sp ")\n", join(sects, level, prefix), val)
			}
			else
				printf("%s=" sp "%s" sp "\n", join(sects, level + 1, prefix), val)
		}
	}
	' "$1"
}
#------------------------------------------------------------------------------
